AWSTemplateFormatVersion: 2010-09-09
Description: "Integration Lambda with CHATGPT"

Parameters:

  pNameProject:
    Description: Project name
    Type: String
    Default: alexachatgpt

  pNameSecret:
    Type: String
    Default: SecretsOpenAIToken

  pTableName:
    Type: String
    Default: chatgpt_interaction

Resources:
        
  rDynamoDBTableChatGPT: 
      Type: AWS::DynamoDB::Table
      Properties: 
          TableName: !Ref pTableName
          AttributeDefinitions: 
          - 
            AttributeName: "id"
            AttributeType: "S"
          KeySchema: 
          - 
            AttributeName: "id"
            KeyType: "HASH"
          BillingMode : PAY_PER_REQUEST

  rSecretCHATGPT:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Ref pNameSecret
      Description: Almacena token de OpenAI
      SecretString: '{"chatgpt_token":"sk-XXXXXXX"}' #Ingresa tu API Key de OpenAI

  rLambdaChatGPT:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      FunctionName: !Sub 'fnc-alexa-skill-chatgpt-dynamodb'
      Description: Integrate with ChatGPT
      Role: !GetAtt rLambdaChatGPTRole.Arn
      Handler: lambda_function.lambda_handler
      Timeout: 500
      MemorySize: 128
      Environment:
        Variables: 
          SM_NAME: !Ref pNameSecret
          DYNAMO_TABLE: !Ref rDynamoDBTableChatGPT
      Code:
        S3Bucket: !Sub "${pNameProject}-code-${AWS::AccountId}"
        S3Key: lambda/alexachatgpt.zip

  rLambdaChatGPTRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub lambda.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: !Sub 'PolicyCHATGPTAlexa01'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:CreateLogGroup
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "dynamodb:CreateTable"
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                Resource: "*"
